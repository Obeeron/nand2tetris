/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:

//    WORKS FOR READ/WRITE KBD REGISTER

//    DMux(in=load, sel=address[14], a=loadData, b=loadScreenOrKbd);
//    DMux(in=loadScreenOrKbd, sel=address[13], a=loadScreen, b=loadKbd);

//    RAM16K(in=in, address=address[0..13], load=loadData, out=outData);
//    Screen(in=in, address=address[0..12], load=loadScreen, out=outScreen);
//    Keyboard(in=in, load=loadKbd, out=outKbd);

//    Mux16(a=outScreen, b=outKbd, sel=address[13], out=outScreenOrKbd);
//    Mux16(a=outData, b=outScreenOrKbd, sel=address[14], out=out);

//  WORKS FOR READ ONLY KBD REGISTER

    DMux(in=load, sel=address[14], a=loadData, b=loadScreen);

    RAM16K(in=in, address=address[0..13], load=loadData, out=outData);
    Screen(in=in, address=address[0..12], load=loadScreen, out=outScreen);
    Keyboard(out=outKbd);

    Mux16(a=outScreen, b=outKbd, sel=address[13], out=outScreenOrKbd);
    Mux16(a=outData, b=outScreenOrKbd, sel=address[14], out=out);

}