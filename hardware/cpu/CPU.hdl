/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    // instruction[0] = j3
    // instruction[1] = j2
    // instruction[2] = j1
    // instruction[3] = d3 - load M
    // instruction[4] = d2 - load D
    // instruction[5] = d1 - load A
    // instruction[6] = no
    // instruction[7] = f
    // instruction[8] = ny
    // instruction[9] = zy
    // instruction[10] = nx
    // instruction[11] = zx
    // instruction[12] = a
    // instruction[15] = opCode

    PARTS:

    // Register D
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=aluOut, load=loadD, out=dReg);

    // Register A
    Not(in=instruction[15], out=notOpCode);
    Or(a=notOpCode, b=instruction[5], out=loadA);
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aRegIn);
    ARegister(in=aRegIn, load=loadA, out=aReg, out[0..14]=addressM);

    // writeM
    And(a=instruction[3], b=instruction[15], out=writeM);

    // ALU
    Mux16(a=aReg, b=inM, sel=instruction[12], out=yInALU);
    ALU(x=dReg, zx=instruction[11], nx=instruction[10],
        y=yInALU, zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6],
        out=outM, out=aluOut, zr=zr, ng=ng);
    

    // JUMP control bits (nr,ng,j1,j2,j3)
    Not(in=zr, out=notZr);
    Not(in=ng, out=notNg);

    And(a=notZr, b=ng, out=gt);
    And(a=notZr, b=notNg, out=lt);

    And(a=instruction[2], b=gt, out=isGt); // jgt
    And(a=instruction[1], b=zr, out=isEq); // jeq
    And(a=instruction[0], b=lt, out=isLt); // jlt

    Or(a=isGt, b=isEq, out=gtOrEq);
    Or(a=isLt, b=gtOrEq, out=isValidJump);

    And(a=isValidJump, b=instruction[15], out=PCloadIn);

    // Program Counter
    PC(in=aReg, load=PCloadIn, inc=true, reset=reset, out[0..14]=pc);
}